#  Copyright (c) 2020 Edward Diener
#
#  Use, modification and distribution is subject to the Boost Software
#  License Version 1.0. (See accompanying file LICENSE_1_0.txt or
#  http://www.boost.org/LICENSE_1_0.txt)

import clang-linux ;
import path ;
import os ;
import type ;
import common ;
import toolset ;
import feature ;
import toolset : flags ;
import clang ;
import gcc ;
import generators ;

feature.extend toolset : embarcadero ;

toolset.inherit-generators embarcadero : clang-linux ;
generators.override embarcadero.prebuilt : builtin.lib-generator ;
generators.override embarcadero.prebuilt : builtin.prebuilt ;
generators.override embarcadero.searched-lib-generator : searched-lib-generator ;

# Override default do-nothing generators.
generators.override embarcadero.compile.c.pch   : pch.default-c-pch-generator   ;
generators.override embarcadero.compile.c++.pch : pch.default-cpp-pch-generator ;

type.set-generated-target-suffix PCH : embarcadero : pch ;

toolset.inherit-rules embarcadero : clang-linux ;
toolset.inherit-flags embarcadero 
    : clang-linux 
    : <runtime-link>shared
      <link>shared
      <threading>multi
      <threading>multi/<target-os>windows
      <stdlib>gnu
      <stdlib>gnu11
      <stdlib>libc++
      <target-os>windows/<runtime-link>static
      <target-os>windows/<runtime-link>shared
    ;

if [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ] {
  .debug-configuration = true ;
}

rule init ( version ? :  command * : options * ) 
{

  local compiler = bcc64 ;
  local preprocessor = cpp64 ;
  local amodel = 64 ;
  
  local optam = [ feature.get-values <address-model> : $(options) ] ;
  
  if $(optam) && $(optam) = 32
    {
    compiler = bcc32x ;
    preprocessor = cpp32x ;
    amodel = 32 ;
    }
  
  command = [ common.get-invocation-command embarcadero : $(compiler) : $(command) ] ;
  
  switch $(command[1]:B)
    {
    case bcc32x : 
        compiler = bcc32x ;
        preprocessor = cpp32x ;
        amodel = 32 ;
    case bcc64 : 
        compiler = bcc64 ;
        preprocessor = cpp64 ;
        amodel = 64 ;
    }
  
  if $(optam) && $(optam) != $(amodel)
    {
    error.user-error "embarcadero initialization: command and address model" :
                     "the compiler '$(compiler)' does not match the address-model of '$(optam)'" ;
    }
  else
    {
      # Determine the version
      if $(command) {
        local command-string = "$(command)" ;
        command-string = $(command-string:J=" ") ;
        local soutput = [ SHELL "$(command-string) --version" ] ;
        version ?= [ MATCH "Embarcadero C[+][+] ([0-9.]+)" : $(soutput) ] ;
        cl_version = [ MATCH ".+version[ ]+([0-9.]+)" : $(soutput) ] ;
        if ! $(cl_version)
            {
            cl_version = 5.0 ;
            }
      }
    
      local condition = [ common.check-init-parameters embarcadero : version $(version) ] ;
      common.handle-options embarcadero : $(condition) : $(command) : $(options) ;
      clang.init-cxxstd-flags embarcadero : $(condition) : $(cl_version) ;
    
      # Support for the Embarcadero root directory. If the Embarcadero binary
      # directory is not in the PATH we need to tell the underlying clang
      # implementation where to find the Embarcadero header/library files
      # and set the correct runtime path so that we can execute Embarcadero
      # programs and find Embarcadero DLLs.
    
      local root = [ feature.get-values <root> : $(options) ] ;
      
      # 1) Look in registry
    
      if ! $(root)
        {
        
        local sdkdir = [ get_sdk_dir ] ;
        
        if $(sdkdir)
            {
            
            local bdsv = [ get_bds_version $(sdkdir) ] ;
            
            if $(bdsv)
                {
                
                local troot = [ W32_GETREG "HKEY_LOCAL_MACHINE\\SOFTWARE\\Embarcadero\\BDS\\$(bdsv)" : RootDir ] ;
                
                if $(troot)
                    {
                    troot = $(troot:T) ;
                    troot = $(troot)name ;
                    root = $(troot:D) ;
                    }
                else
                    {
                    troot = [ W32_GETREG "HKEY_CURRENT_USER\\SOFTWARE\\Embarcadero\\BDS\\$(bdsv)" : RootDir ] ;
                    if $(troot)
                        {
                        troot = $(troot:T) ;
                        troot = $(troot)name ;
                        root = $(troot:D) ;
                        }
                    }
                }
            }
        }
        
        
      # 2) Look for path in the command
        
      if ! $(root)
        {
        
        local cpath = $(command[1]:D) ;
        
        if $(cpath)
            {
            root = $(cpath:P) ;
            }
        }
        
      # 3) Search for the directory of the command
        
      if ! $(root) 
        {
        
        local pdirs = [ path.programs-path ] ;
        
        for local dir in $(pdirs)
            {
            if [ CHECK_IF_FILE $(dir)/$(command) ]
                {
                root = $(dir:P) ;
                break ;
                }
            
            }
        }
        
      if ! $(root) 
        {
        error.user-error "Embarcadero toolset initialization: the root directory for the Embarcadero installation can not be found" ;
        }
      else
        {
        
        local lib_path = $(root)/bin $(root)/bin64 $(root)/Bpl C:/Users/Public/Documents/Embarcadero ;
        if $(.debug-configuration)
        {
            ECHO "notice:" using Embarcadero libraries with clang compilation"::" $(condition) "::" $(lib_path) ;
        }
        flags embarcadero.link RUN_PATH $(condition) : $(lib_path) ;
        
        local system_include_option = "-isystem " ;
        local system_include_directories = $(root)/include/windows/crtl $(root)/include/windows/sdk $(root)/include/windows/rtl $(root)/include/dinkumware64 ;
        
        local lib_dir_release ;
        local lib_dir_debug ;
        
        if $(compiler) = bcc32c || $(compiler) = bcc32x
            {
            lib_dir_release = $(root)/lib/win32c/release $(root)/lib/win32/release $(root)/lib/win32/release/psdk ;
            lib_dir_debug = $(root)/lib/win32c/debug $(root)/lib/win32/debug $(root)/lib/win32/debug/psdk ;
            }
        else
            {
            lib_dir_release = $(root)/lib/win64/release $(root)/lib/win64/release/psdk ;
            lib_dir_debug = $(root)/lib/win64/debug $(root)/lib/win64/debug/psdk ;
            }
        
        flags embarcadero.compile OPTIONS $(condition) : $(system_include_option)$(system_include_directories) ;
        flags embarcadero.link LINKPATH $(condition)/<variant>release : $(lib_dir_release) ;
        flags embarcadero.link LINKPATH $(condition)/<variant>debug : $(lib_dir_debug) $(lib_dir_release) ;
        
        local archiver = tlib ;
        local arflags = /P512 ;
        
        if $(compiler) = bcc64
            {
            archiver = tlib64 ;
            arflags = /P2048 ;
            }
        
        flags embarcadero.archive .AR $(condition) : $(root)/bin/$(archiver) ;
        flags embarcadero.archive .ARFLAGS $(condition) : $(arflags) ;
        flags embarcadero.asm .TASM $(condition) : $(root)/bin/tasm32 ;
        flags embarcadero.asm USER_OPTIONS $(condition) : [ feature.get-values <asmflags> : $(options) ] : unchecked ;
        flags embarcadero.archive AROPTIONS $(condition) : [ feature.get-values <archiveflags> : $(options) ] : unchecked ;
        
        local mte = [ feature.get-values <user-interface> : $(options) ] ;
        
        if $(mte)
            {
            flags embarcadero OPTIONS <main-target-type>EXE/$(condition) : <user-interface>$(mte) ;
            }
        else
            {
            flags embarcadero OPTIONS <main-target-type>EXE/$(condition) : <user-interface>console ;
            }
        }
    }
}

local rule get_sdk_dir ( )
    {
    
    local ret ;
    local appdata = [ os.environ APPDATA ] ;
    
    if $(appdata)
        {
        ret = $(appdata:T)/Embarcadero/BDS ;
        }
    return $(ret) ;
    }
    
local rule get_bds_version ( sdir )
    {
    
    local ret ;
    local flist = [ GLOB sdir : * ] ;
    
    if $(flist)
        {
        
        local dirs ;
        
        for local file in $(flist)
            {
            if ! [ CHECK_IF_FILE $(file) ]
                {
                dirs += $(file) ;
                }
            }
        if $(dirs)
            {
            
            local ldir = $(dirs[-1]) ;
            
            ret =  $(ldir:B) ;
            }
        }
    return $(ret) ;
    }

###############################################################################
# Declare generators

type.set-generated-target-suffix STATIC_LIB : <toolset>embarcadero <target-os>windows <address-model>64 : a ;
type.set-generated-target-suffix STATIC_LIB : <toolset>embarcadero <target-os>windows <address-model>32 : lib ;

generators.register-linker embarcadero.link : OBJ SEARCHED_LIB STATIC_LIB IMPORT_LIB : EXE : <toolset>embarcadero ;
generators.register-linker embarcadero.link.dll : OBJ SEARCHED_LIB STATIC_LIB IMPORT_LIB : SHARED_LIB IMPORT_LIB : <toolset>embarcadero ;

generators.register-archiver embarcadero.archive : OBJ : STATIC_LIB : <toolset>embarcadero ;
generators.register-c-compiler embarcadero.compile.c++ : CPP : OBJ : <toolset>embarcadero ;
generators.register-c-compiler embarcadero.compile.c : C : OBJ : <toolset>embarcadero ;
generators.register-standard embarcadero.asm : ASM : OBJ : <toolset>embarcadero ;

# Flags

local opt_console = -tC ;
local opt_shared = -tD ;
local opt_mt = -tM ;
local opt_drtl = -tR ;
local opt_dapp = -tW ;
local opt_cxxflag = -P ;
local opt_compile_flags = -DNDEBUG ;
local opt_lflags = "-lS:1048576 -lSc:4098 -lH:1048576 -lHc:8192" ;
    
flags embarcadero OPTIONS <user-interface>console : $(opt_console) ;
flags embarcadero OPTIONS <user-interface>gui : $(opt_dapp) ;
flags embarcadero OPTIONS <runtime-link>shared : $(opt_drtl) ;
flags embarcadero OPTIONS <main-target-type>LIB/<link>shared : $(opt_shared) ;
flags embarcadero OPTIONS <threading>multi : $(opt_mt) ;
flags embarcadero.compile.c++ OPTIONS : $(opt_cxxflag) ;
flags embarcadero.compile OPTIONS <variant>release : $(opt_compile_flags) ;
flags embarcadero.link OPTIONS : $(opt_lflags) ;
flags embarcadero.archive AROPTIONS <archiveflags> ;
flags embarcadero.asm USER_OPTIONS <asmflags> ;

###############################################################################
# C and C++ compilation

#|

rule compile.c++ ( targets * : sources * : properties * ) {
  local pch-file = [ on $(<) return $(PCH_FILE) ] ;

  if $(pch-file) {
    DEPENDS $(<) : $(pch-file) ;
    clang-linux.compile.c++.with-pch $(targets) : $(sources) ;
  }
  else {
    clang-linux.compile.c++.without-pch $(targets) : $(sources) ;
  }
}

actions compile.c++.without-pch {
  "$(CONFIG_COMMAND)" -c -x c++ $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -o "$(<)" "$(>)"
}

actions compile.c++.with-pch bind PCH_FILE
{
  "$(CONFIG_COMMAND)" -c -x c++ $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -Xclang -include-pch -Xclang "$(PCH_FILE)" -o "$(<)" "$(>)"
}

rule compile.c ( targets * : sources * : properties * )
{
  local pch-file = [ on $(<) return $(PCH_FILE) ] ;

  if $(pch-file) {
    DEPENDS $(<) : $(pch-file) ;
    clang-linux.compile.c.with-pch $(targets) : $(sources) ;
  }
  else {
    clang-linux.compile.c.without-pch $(targets) : $(sources) ;
  }
}

actions compile.c.without-pch
{
  "$(CONFIG_COMMAND)" -c -x c $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -c -o "$(<)" "$(>)"
}

actions compile.c.with-pch bind PCH_FILE
{
  "$(CONFIG_COMMAND)" -c -x c $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -Xclang -include-pch -Xclang "$(PCH_FILE)" -c -o "$(<)" "$(>)"
}

###############################################################################
# PCH emission

RM = [ common.rm-command ] ;

rule compile.c++.pch ( targets * : sources * : properties * ) {
}

actions compile.c++.pch {
  $(RM) -f "$(<)" && "$(CONFIG_COMMAND)" -c -x c++-header $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -Xclang -emit-pch -o "$(<)" "$(>)"
}

rule compile.c.pch ( targets * : sources * : properties * ) {
}

actions compile.c.pch
{
  $(RM) -f "$(<)" && "$(CONFIG_COMMAND)" -c -x c-header $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -Xclang -emit-pch -o "$(<)" "$(>)"
}

###############################################################################
# Linking

SPACE = " " ;

rule link ( targets * : sources * : properties * ) {
  SPACE on $(targets) = " " ;
  JAM_SEMAPHORE on $(targets) = <s>clang-linux-link-semaphore ;
}

rule link.dll ( targets * : sources * : properties * ) {
  SPACE on $(targets) = " " ;
  JAM_SEMAPHORE on $(targets) = <s>clang-linux-link-semaphore ;
}

|#

rule archive ( targets * : sources * : properties * )
{
}

actions updated together piecemeal archive
{ 
    "$(.AR)" $(AROPTIONS) $(.ARFLAGS) /u /a /C "$(<)" +-"$(>)"
}

actions link bind LIBRARIES {
    "$(CONFIG_COMMAND)" -L"$(LINKPATH)" -Wl,-R$(SPACE)-Wl,"$(RPATH)" -Wl,-rpath-link$(SPACE)-Wl,"$(RPATH_LINK)" -o "$(<)" "$(>)" "$(LIBRARIES)" -l$(FINDLIBS-ST) -l$(FINDLIBS-SA) $(OPTIONS) $(USER_OPTIONS)
}

actions link.dll bind LIBRARIES {
    "$(CONFIG_COMMAND)" -L"$(LINKPATH)" -o "$(<)" "$(>)" $(opt_shared) "$(LIBRARIES)" -l$(FINDLIBS-ST) -l$(FINDLIBS-SA) $(OPTIONS) $(USER_OPTIONS)
}

rule asm ( targets * : sources * : properties * )
{
}

# /ml makes all symbol names case-sensitive
actions asm
{
    $(.TASM) /ml $(USER_OPTIONS) "$(>)" "$(<)"
}
